swagger: '2.0'
info:
  title: slash.ai
  description: 'Machine learning as a (REST API) service, in version 2.'
  version: 0.7.9
#host: api.slash.ai
schemes:
  - https
basePath: /api
produces:
  - application/json
securityDefinitions:
  authToken:
    type: apiKey
    name: authorization
    in: header
security:
  - authToken: []
tags:
 - name: auth
   description: 'Authtoken API'
 - name: network
   description: 'Neuronal Networks API'
 - name: classifier
   description: 'Classifier API'
 - name: nlp
   description: 'Natural Language Processing Tools API'
 - name: commands
   description: 'NLP Commands Analyser API'
 - name: status
   description: 'Status Information API'
paths:

  /customer/alive:
      get:
        tags:
         - auth
        summary: 'Get the alive status of the v1 token api platform'
        description: 'Returns the status of the api authentication services backend.'
        consumes:
         - application/json
        responses:
          '200':
           description: 'Is alive.'
          '503':
           description: 'Is down.'
  /customer/login:
     post:
       tags:
        - auth
       summary: 'Generates a fresh api token.'
       description: 'You can use this endpoint to create a fresh api token
       to authorize.'
       consumes:
        - application/json
       produces:
        - application/json
       parameters:
        - name: body
          in: body
          required: true
          schema:
           $ref: '#/definitions/LoginRequest'
       responses:
        '201':
         description: 'A new token has been generated.'
         schema:
          $ref: '#/definitions/LoginResponse'
        '400':
         description: 'The request was missing parameters.'
         schema:
          $ref: '#/definitions/Error'
        '500':
         description: 'An error occured during the processing.'
         schema:
          $ref: '#/definitions/Error'
        '403':
         description: 'The login credentials used were wrong.'
         schema:
          $ref: '#/definitions/Error'
  /customer/register:
       post:
         tags:
          - auth
         summary: 'Register for a new main (mandator) account.'
         description: 'You can use this endpoint to register a new account.'
         consumes:
          - application/json
         produces:
          - application/json
         parameters:
          - name: body
            in: body
            required: true
            schema:
             $ref: '#/definitions/LoginRequest'
         responses:
          '201':
           description: 'A new account has been created.'
           schema:
            $ref: '#/definitions/LoginResponse'
          '400':
           description: 'The request was missing parameters.'
           schema:
            $ref: '#/definitions/Error'
          '500':
           description: 'An error occured during the processing.'
           schema:
            $ref: '#/definitions/Error'

  /v2/alive:
    get:
      tags:
       - status
      summary: 'Get the alive status of the v2 api platform'
      description: 'Returns the status of the api version 2 backend.'
      consumes:
       - application/json
      responses:
        '200':
         description: 'Is alive.'
        '503':
         description: 'Is down.'
  /v2/authcheck:
    get:
      tags:
       - status
      summary: 'Check whether you have access to the v2 api platform.'
      description: 'Confirms your clients accessability of the api version 2 backend.'
      consumes:
       - application/json
      responses:
        '200':
          description: 'Your authentication and request are good.'
        '400':
          description: 'You are missing headers, probably content-type.'
        '401':
         description: 'You are missing the auth-token. authorization header.'
        '403':
         description: 'Your auth-token is bad.'
        '412':
         description: 'Your auth-token s user is missing scopes.'
  /v2/status/{apiId}:
   get:
      tags:
       - status
      summary: 'Get the status of an asynchronous api action.'
      description: 'Will return the status of an api action, containing possible errors or objectIds for e.g. created networks.'
      consumes:
       - application/json
      produces:
       - application/json
      parameters:
       - name: apiId
         in: path
         description: 'The apiId of the api action returned by any response with status 202.'
         required: true
         type: string
         format: 'UUID'
      responses:
        '200':
         description: 'Api action identifier response'
         schema:
          $ref: '#/definitions/ApiIdentifier'
        '202':
         description: 'Your api action is still waiting to be processed or currently processing.'
         schema:
          $ref: '#/definitions/ApiIdentifier'
        '404':
         description: 'There is not api action identifier for your requested apiId.'
        '501':
         description: 'There has been an error during the async. processing of your request.'
         schema:
          $ref: '#/definitions/ApiIdentifier'
        '500':
         description: 'An error happend while trying to process the api action identifier request.'
         schema:
          $ref: '#/definitions/Error'

  /v2/nn:
   post:
     tags:
      - network
     summary: 'Creates a new neuronal network.'
     description: 'You can use this endpoint to create a new neuronal network.'
     consumes:
      - application/json
     produces:
      - application/json
     parameters:
      - name: body
        in: body
        required: true
        schema:
         $ref: '#/definitions/CreateNetwork'
     responses:
      '202':
       description: 'Create was accepted, its processing.'
       schema:
        $ref: '#/definitions/AsyncResponse'
      '400':
       description: 'The request was missing parameters.'
       schema:
        $ref: '#/definitions/Error'
      '500':
       description: 'An error occured during the processing.'
       schema:
        $ref: '#/definitions/Error'
      '507':
       description: 'The server queue has reached maximum load, try again later.'
       schema:
        $ref: '#/definitions/Error'
   delete:
      tags:
       - network
      summary: 'Deletes a neuronal network'
      description: 'You can use this endpoint to delete a neuronal network.'
      consumes:
       - application/json
      produces:
       - application/json
      parameters:
       - name: body
         in: body
         required: true
         schema:
          $ref: '#/definitions/DeleteNetwork'
      responses:
       '200':
        description: 'Network has been deleted'
       '500':
        description: 'There was an error during the deletion.'
        schema:
         $ref: '#/definitions/Error'
   put:
      tags:
       - network
      summary: 'Train a network request.'
      description: 'You can use this endpoint to train a network.'
      consumes:
       - application/json
      produces:
       - application/json
      parameters:
       - name: body
         in: body
         required: true
         schema:
          $ref: '#/definitions/TrainNetwork'
      responses:
       '202':
        description: 'The train request has been queued.'
        schema:
         $ref: '#/definitions/AsyncResponse'
       '400':
        description: 'You are missing or sending bad request data.'
        schema:
         $ref: '#/definitions/Error'
       '500':
        description: 'An error occured while trying to accept the train request.'
        schema:
         $ref: '#/definitions/Error'
       '507':
        description: 'The server queue has reached maximum load, try again later.'
        schema:
         $ref: '#/definitions/Error'
   patch:
      tags:
       - network
      summary: 'Process a network request.'
      description: 'You can use this endpoint to request a network process.'
      consumes:
       - application/json
      produces:
       - application/json
      parameters:
       - name: body
         in: body
         required: true
         schema:
          $ref: '#/definitions/ProcessNetwork'
      responses:
       '200':
        description: 'Your network has successfully processed your request.'
        schema:
         $ref: '#/definitions/NetworkProcessResponse'
       '400':
        description: 'You are missing or sending bad request data.'
        schema:
         $ref: '#/definitions/Error'
       '500':
        description: 'There has been an error while processing your network request.'
        schema:
         $ref: '#/definitions/Error'
  /v2/nn/{netId}:
   get:
    tags:
     - network
    summary: 'Get information of a network.'
    description: 'You can use this endpoint to get detailed information of your network.'
    consumes:
     - application/json
    produces:
      - application/json
    parameters:
      - name: netId
        in: path
        required: true
        type: string
        description: 'The id of the network.'
        format: 'UUID'
    responses:
     '200':
      description: 'A network for this id was found.'
      schema:
       $ref: '#/definitions/NetworkInformation'
     '403':
      description: 'You do not own this network.'
      schema:
       $ref: '#/definitions/Error'
     '404':
      description: 'A network with the provided id does not exist.'
      schema:
       $ref: '#/definitions/Error'
     '500':
      description: 'An error occured while trying get the network information.'
      schema:
       $ref: '#/definitions/Error'
  /v2/nn/customer/{customerId}:
     get:
      tags:
       - network
      summary: 'Get information of a network.'
      description: 'You can use this endpoint to get detailed information of your network, using the related
      customer id.'
      consumes:
       - application/json
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: 'The id of the customer your network is related to.'
          format: 'UUID'
      responses:
       '200':
        description: 'A network for this id was found.'
        schema:
         $ref: '#/definitions/NetworkInformation'
       '403':
        description: 'You do not own this network.'
        schema:
         $ref: '#/definitions/Error'
       '404':
        description: 'A network with the provided id does not exist.'
        schema:
         $ref: '#/definitions/Error'
       '500':
        description: 'An error occured while trying get the network information.'
        schema:
         $ref: '#/definitions/Error'
  /v2/nn/stack:
   put:
     tags:
      - network
     summary: 'Stack a train a network request.'
     description: 'You can use this endpoint to stack multiple training sets, to execute them later.'
     consumes:
      - application/json
     produces:
      - application/json
     parameters:
      - name: body
        in: body
        required: true
        schema:
         $ref: '#/definitions/TrainNetwork'
     responses:
      '200':
       description: 'The train request has been stacked.'
       schema:
        $ref: '#/definitions/AsyncResponse'
      '400':
       description: 'You are missing or sending bad request data.'
       schema:
        $ref: '#/definitions/Error'
      '500':
       description: 'An error occured while trying to accept the train request.'
       schema:
        $ref: '#/definitions/Error'
      '507':
       description: 'The server queue has reached maximum load, try again later.'
       schema:
        $ref: '#/definitions/Error'
  /v2/nn/stack/run:
     put:
       tags:
        - network
       summary: 'Run stacked train requests for a network.'
       description: 'You can use this endpoint to execute the training of all stacked training sets for a network.'
       consumes:
        - application/json
       produces:
        - application/json
       parameters:
        - name: body
          in: body
          required: true
          schema:
           $ref: '#/definitions/RunStackTrainNetwork'
       responses:
        '202':
         description: 'All stacked train request have been queued in a single training request.'
         schema:
          $ref: '#/definitions/AsyncResponse'
        '400':
         description: 'You are missing or sending bad request data.'
         schema:
          $ref: '#/definitions/Error'
        '500':
         description: 'An error occured while trying to accept the train request.'
         schema:
          $ref: '#/definitions/Error'
        '507':
         description: 'The server queue has reached maximum load, try again later.'
         schema:
          $ref: '#/definitions/Error'

  /v2/nlp/classifier:
     post:
       tags:
        - classifier
       summary: 'Creates a new nlp classifier'
       description: 'You can use this endpoint to create a new nlp classifier'
       consumes:
        - application/json
       produces:
        - application/json
       parameters:
        - name: body
          in: body
          required: true
          schema:
           $ref: '#/definitions/CreateClassifier'
       responses:
        '202':
         description: 'Create was accepted, its processing.'
         schema:
          $ref: '#/definitions/AsyncResponse'
        '400':
         description: 'The request was missing parameters.'
         schema:
          $ref: '#/definitions/Error'
        '500':
         description: 'An error occured during the processing.'
         schema:
          $ref: '#/definitions/Error'
        '507':
         description: 'The server queue has reached maximum load, try again later.'
         schema:
          $ref: '#/definitions/Error'
     delete:
        tags:
         - classifier
        summary: 'Deletes a nlp classifier'
        description: 'You can use this endpoint to delete a nlp classifier.'
        consumes:
         - application/json
        produces:
         - application/json
        parameters:
         - name: body
           in: body
           required: true
           schema:
            $ref: '#/definitions/DeleteClassifier'
        responses:
         '200':
          description: 'Classifier has been deleted'
         '500':
          description: 'There was an error during the deletion.'
          schema:
           $ref: '#/definitions/Error'
     put:
        tags:
         - classifier
        summary: 'Train a classifier request.'
        description: 'You can use this endpoint to train a nlp classifier.'
        consumes:
         - application/json
        produces:
         - application/json
        parameters:
         - name: body
           in: body
           required: true
           schema:
            $ref: '#/definitions/TrainClassifier'
        responses:
         '202':
          description: 'The train request has been queued.'
          schema:
           $ref: '#/definitions/AsyncResponse'
         '400':
          description: 'You are missing or sending bad request data.'
          schema:
           $ref: '#/definitions/Error'
         '500':
          description: 'An error occured while trying to accept the train request.'
          schema:
           $ref: '#/definitions/Error'
         '507':
          description: 'The server queue has reached maximum load, try again later.'
          schema:
           $ref: '#/definitions/Error'
     patch:
        tags:
         - classifier
        summary: 'Process a nlp classifier request.'
        description: 'You can use this endpoint to request a nlp classifier process.'
        consumes:
         - application/json
        produces:
         - application/json
        parameters:
         - name: body
           in: body
           required: true
           schema:
            $ref: '#/definitions/ProcessClassifier'
        responses:
         '200':
          description: 'Your classifier has successfully processed your request.'
          schema:
           $ref: '#/definitions/ClassifierProcessResponse'
         '400':
          description: 'You are missing or sending bad request data.'
          schema:
           $ref: '#/definitions/Error'
         '500':
          description: 'There has been an error while processing your classifier request.'
          schema:
           $ref: '#/definitions/Error'
  /v2/nlp/classifier/{classifierId}:
     get:
      tags:
       - classifier
      summary: 'Get information of a nlp classifier.'
      description: 'You can use this endpoint to get detailed information of your nlp classifier.'
      consumes:
       - application/json
      produces:
        - application/json
      parameters:
        - name: classifierId
          in: path
          required: true
          type: string
          description: 'The id of the nlp classifier.'
          format: 'UUID'
      responses:
       '200':
        description: 'A classifier for this id was found.'
        schema:
         $ref: '#/definitions/ClassifierInformation'
       '403':
        description: 'You do not own this classifier.'
        schema:
         $ref: '#/definitions/Error'
       '404':
        description: 'A classifier with the provided id does not exist.'
        schema:
         $ref: '#/definitions/Error'
       '500':
        description: 'An error occured while trying get the classifier information.'
        schema:
         $ref: '#/definitions/Error'
  /v2/nlp/classifier/customer/{customerId}:
       get:
        tags:
         - classifier
        summary: 'Get information of a nlp classifier.'
        description: 'You can use this endpoint to get detailed information of your nlp classifier, using the
        related customer.'
        consumes:
         - application/json
        produces:
          - application/json
        parameters:
          - name: customerId
            in: path
            required: true
            type: string
            description: 'The id of the customer the nlp classifier is related to.'
            format: 'UUID'
        responses:
         '200':
          description: 'A classifier for this id was found.'
          schema:
           $ref: '#/definitions/ClassifierInformation'
         '403':
          description: 'You do not own this classifier.'
          schema:
           $ref: '#/definitions/Error'
         '404':
          description: 'A classifier with the provided id does not exist.'
          schema:
           $ref: '#/definitions/Error'
         '500':
          description: 'An error occured while trying get the classifier information.'
          schema:
           $ref: '#/definitions/Error'

  /v2/nlp/tools/{:language}/compare:
   post:
    tags:
     - nlp
    summary: 'Compare two words.'
    description: 'Use this endpoint to analyse the relation between two words.'
    consumes:
     - application/json
    produces:
      - application/json
    parameters:
     - name: body
       in: body
       required: true
       schema:
         $ref: '#/definitions/NLPCompareRequest'
     - name: language
       in: path
       required: true
       type: string
       description: 'language code e.g. de or en'
       format: '2 letter language code'
    responses:
     '200':
      description: 'Your nlp request has been processed.'
      schema:
        $ref: '#/definitions/NLPCompareResult'
     '400':
       description: 'Your request data is missing parameters.'
       schema:
        $ref: '#/definitions/Error'
     '500':
      description: 'An error occured while processing your nlp request.'
      schema:
       $ref: '#/definitions/Error'
  /v2/nlp/tools/{:language}/word:
     post:
      tags:
       - nlp
      summary: 'Analyse word.'
      description: 'Use this endpoint to analyse a single word.'
      consumes:
       - application/json
      produces:
        - application/json
      parameters:
       - name: body
         in: body
         required: true
         schema:
           $ref: '#/definitions/NLPWordRequest'
       - name: language
         in: path
         required: true
         type: string
         description: 'language code e.g. de or en'
         format: '2 letter language code'
      responses:
       '200':
        description: 'Your nlp request has been processed.'
        schema:
          $ref: '#/definitions/NLPWordResult'
       '400':
         description: 'Your request data is missing parameters.'
         schema:
          $ref: '#/definitions/Error'
       '500':
        description: 'An error occured while processing your nlp request.'
        schema:
         $ref: '#/definitions/Error'
  /v2/nlp/tools/{:language}/text:
     post:
      tags:
       - nlp
      summary: 'Analyse sentence.'
      description: 'Use this endpoint to analyse a whole sentence (or text block).'
      consumes:
       - application/json
      produces:
        - application/json
      parameters:
       - name: body
         in: body
         required: true
         schema:
           $ref: '#/definitions/NLPTextRequest'
       - name: language
         in: path
         required: true
         type: string
         description: 'language code e.g. de or en'
         format: '2 letter language code'
      responses:
       '200':
        description: 'Your nlp request has been processed.'
        schema:
          $ref: '#/definitions/NLPTextResult'
       '400':
         description: 'Your request data is missing parameters.'
         schema:
          $ref: '#/definitions/Error'
       '500':
        description: 'An error occured while processing your nlp request.'
        schema:
         $ref: '#/definitions/Error'
  /v2/nlp/tools/{:language}/importance:
     post:
      tags:
       - nlp
      summary: 'Get most important words in a sentence.'
      description: 'Will identify the most important word(s) in a sentence. You can pass your own word(s).'
      consumes:
       - application/json
      produces:
        - application/json
      parameters:
       - name: body
         in: body
         required: true
         schema:
           $ref: '#/definitions/NLPImportanceRequest'
       - name: language
         in: path
         required: true
         type: string
         description: 'language code e.g. de or en'
         format: '2 letter language code'
      responses:
       '200':
        description: 'Your nlp request has been processed.'
        schema:
          $ref: '#/definitions/NLPImportanceResult'
       '400':
         description: 'Your request data is missing parameters.'
         schema:
          $ref: '#/definitions/Error'
       '500':
        description: 'An error occured while processing your nlp request.'
        schema:
         $ref: '#/definitions/Error'
  /v2/nlp/tools/language:
       post:
        tags:
         - nlp
        summary: 'Identify the language of a text.'
        description: 'Will identify the language of a text and return a list of best matches.'
        consumes:
         - application/json
        produces:
          - application/json
        parameters:
         - name: body
           in: body
           required: true
           schema:
             $ref: '#/definitions/NLPTextRequest'
        responses:
         '200':
          description: 'Your nlp request has been processed.'
          schema:
            $ref: '#/definitions/NLPLanguageResult'
         '400':
           description: 'Your request data is missing parameters.'
           schema:
            $ref: '#/definitions/Error'
         '500':
          description: 'An error occured while processing your nlp request.'
          schema:
           $ref: '#/definitions/Error'

  /v2/nlp/commands:
       post:
         tags:
          - commands
         summary: 'Creates a new nlp commands classifier'
         description: 'You can use this endpoint to create & train a new nlp commands classifier'
         consumes:
          - application/json
         produces:
          - application/json
         parameters:
          - name: body
            in: body
            required: true
            schema:
             $ref: '#/definitions/CreateCommandsClassifier'
         responses:
          '202':
           description: 'Create was accepted, its processing.'
           schema:
            $ref: '#/definitions/AsyncResponse'
          '400':
           description: 'The request was missing parameters.'
           schema:
            $ref: '#/definitions/Error'
          '500':
           description: 'An error occured during the processing.'
           schema:
            $ref: '#/definitions/Error'
          '507':
           description: 'The server queue has reached maximum load, try again later.'
           schema:
            $ref: '#/definitions/Error'
       delete:
          tags:
           - commands
          summary: 'Deletes a nlp commands classifier'
          description: 'You can use this endpoint to delete a nlp commands classifier.'
          consumes:
           - application/json
          produces:
           - application/json
          parameters:
           - name: body
             in: body
             required: true
             schema:
              $ref: '#/definitions/DeleteClassifier'
          responses:
           '200':
            description: 'Classifier has been deleted'
           '500':
            description: 'There was an error during the deletion.'
            schema:
             $ref: '#/definitions/Error'
       patch:
          tags:
           - commands
          summary: 'Process a nlp commands classifier request.'
          description: 'You can use this endpoint to request a nlp commands classifier process.'
          consumes:
           - application/json
          produces:
           - application/json
          parameters:
           - name: body
             in: body
             required: true
             schema:
              $ref: '#/definitions/ProcessClassifier'
          responses:
           '200':
            description: 'Your classifier has successfully processed your request.'
            schema:
             $ref: '#/definitions/CommandsClassifierProcessResponse'
           '400':
            description: 'You are missing or sending bad request data.'
            schema:
             $ref: '#/definitions/Error'
           '500':
            description: 'There has been an error while processing your classifier request.'
            schema:
             $ref: '#/definitions/Error'

definitions:
 AsyncResponse:
  type: object
  properties:
   id:
    type: string
    description: 'this is the apId you can use to check /status/{apiId}'
   msg:
    type: string
   result:
    type: object
 ClassifierInformation:
  type: object
  properties:
   id:
    type: string
   mandatorId:
    type: string
   customerId:
    type: string
   locked:
    type: boolean
   size:
    type: integer
 NetworkInformation:
  type: object
  properties:
   id:
    type: string
   mandatorId:
    type: string
   customerId:
    type: string
   features:
    type: integer
   units:
    type: integer
   outputs:
    type: integer
   locked:
    type: boolean
   size:
    type: integer
   type:
    type: string
 ProcessClassifier:
  type: object
  properties:
   classifierId:
    type: string
   customer:
    type: string
    description: 'is optional.'
   input:
    type: string
 ProcessNetwork:
  type: object
  properties:
   netId:
    type: string
   customer:
    type: string
    description: 'is optional.'
   input:
    type: array
    items:
     type: number
     format: float
 ClassifierProcessResponseData:
  type: object
  properties:
   label:
    type: string
   value:
    type: number
    format: double
 CommandsClassifierProcessResponse:
  type: object
  properties:
   output:
    type: array
    items:
     $ref: '#/definitions/ClassifierProcessResponseData'
   pealedInput:
    type: string
    description: 'input cleaned from command related words'
   detectedNumerals:
    type: array
    items:
     type: number
     format: float
    description: 'identified numerals/numbers in the pealed input string'
 ClassifierProcessResponse:
  type: object
  properties:
   output:
    type: array
    items:
     $ref: '#/definitions/ClassifierProcessResponseData'
 NetworkProcessResponse:
  type: object
  properties:
   output:
    type: array
    items:
     type: number
     format: float
 CreateCommandsClassifier:
  type: object
  properties:
    customer:
     type: string
     description: 'is optional.'
    data:
     type: array
     items:
      $ref: '#/definitions/TrainClassifierData'
    filter:
     type: array
     items:
      type: string
    language:
     type: string
     description: '2 letter language code e.g. "en".'
 CreateClassifier:
  type: object
  properties:
   customer:
    type: string
    description: 'is optional.'
 CreateNetwork:
  type: object
  properties:
   customer:
    type: string
    description: 'optional mapping to a customer'
   features:
    type: integer
   units:
    type: integer
    description: 'if your network type is "deep" (or lstm) and you want multiple hidden layers
    it is possible to provide an array of integers here e.g. [10,10,10] for 3 hidden layers with a size of 10 each.'
   outputs:
    type: integer
   networkType:
    type: string
    enum: [
      'perceptron', 'deep', 'lstm', 'hopfield'
      ]
 TrainClassifier:
  type: object
  properties:
   classifierId:
    type: string
   customer:
    type: string
    description: 'is optional.'
   data:
    type: array
    description: 'array that contains your training data. Contains arrays(string) in itself.'
    items:
     $ref: '#/definitions/TrainClassifierData'
 RunStackTrainNetwork:
  type: object
  properties:
    netId:
     type: string
    customer:
     type: string
     description: 'is optional.'
 TrainNetwork:
  type: object
  properties:
   netId:
    type: string
   customer:
    type: string
    description: 'is optional.'
   data:
    type: array
    description: 'array that contains your training data. Contains objects: { input: [0.1,0.2,0.3], output: [0.5,0.6]}'
    items:
     $ref: '#/definitions/TrainNetworkData'
 TrainClassifierData:
  type: array
  items:
   type: string
 TrainNetworkData:
  type: object
  properties:
   input:
    type: array
    items:
     type: number
     format: float
   output:
    type: array
    items:
     type: number
     format: float
 DeleteClassifier:
  type: object
  properties:
   classifierId:
    type: string
   customer:
    type: string
    description: 'is optional.'
 DeleteNetwork:
  type: object
  properties:
   netId:
    type: string
   customer:
    type: string
    description: 'is optional.'
 ApiIdentifier:
  type: object
  properties:
   apiId:
    type: string
    description: 'UUID'
   objectId:
    type: string
    description: 'UUID, the possible result of a create action.'
   mandatorId:
    type: string
    description: 'UUID of the mandator that is linked to this action.'
   userId:
    type: string
    description: 'UUID of the user that is linked to this action'
   customerId:
    type: string
    description: 'String representation of the customer that has been linked to this action.'
   status:
    type: string
    enum: [
      'pending', 'done', 'error', 'received'
      ]
    description: 'The status of this api action, (if in done state) once collected by your client it will turn from done to received.'
   type:
    type: string
    description: 'Describes the type of request this api action identifier was creaded for.'
   error:
    type: string
    description: 'Defaults to null, will contain an error if one occures during the processing of the related action.'
   result:
    type: object
    description: 'Contains any kind of result (JSON object) that a successfull async operation might have resulted in.'
   jobId:
    type: integer
    format: int64
    description: 'The JobID that was used for this action in our backend queue, might be helpfull for debugging.'
 NLPCompareRequest:
  type: object
  properties:
    a:
     type: string
    b:
     type: string
 NLPCompareResult:
  type: object
 NLPWordRequest:
  type: object
  properties:
    word:
     type: string
 NLPWordResult:
  type: object
  properties:
    word:
     type: string
    phonetic:
     type: array
     items:
      type: string
    stem:
     type: object
     properties:
      paice:
       type: string
      husk:
       type: string
 NLPTextRequest:
  type: object
  properties:
    text:
     type: string
 NLPTextResult:
  type: object
  properties:
    words:
     type: array
     items:
      $ref: '#/definitions/NLPWordResult'
 NLPImportanceRequest:
  type: object
  properties:
    words:
     type: array
     items:
      type: string
    text:
     type: string
 NLPLanguageResult:
  type: object
  properties:
   languages:
    type: array
    items:
     type: array
     items:
      type: string
 NLPImportanceResult:
  type: object
  properties:
   importance:
    type: array
    items:
     type: object
   ordered:
    type: array
    items:
     type: object
 LoginRequest:
  type: object
  properties:
   email:
    type: string
   password:
    type: string
 LoginResponse:
  type: object
  properties:
   token:
    type: string
    description: 'Api token used to authorize.'
   lifetime:
    type: number
    format: int32
    description: 'Lifetime of the generated api token in milliseconds.'
 Error:
  type: object
  properties:
   error:
    type: string
    description: 'Contains the information why the request failed or why the action stalled.'
